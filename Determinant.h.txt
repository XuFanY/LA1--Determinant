//Provided by XuFanY, Nankai University, 2019.2.13

#ifndef DETERMINANT_H
#define DETERMINANT_H

#include"math.h"

//进行行操作
const char ch1 = 'h';

//进行列操作
const char ch2 = 'l';

//行列式,记当前行列式为A
class Determinant
{
public:

	//行列式的阶数
	int n;

	//行列式的元素
	double **element;

	//默认构造函数
	Determinant()
	{
		n = 0, element = nullptr;
	}

	//默认(assign为true时)构造一个n0阶零行列式,assign为false时元素不赋值
	Determinant(int n0, bool assign = true)
	{
		int i, j;
		n = n0;
		element = new double*[n];
		for (i = 0; i < n; i++)
		{
			element[i] = new double[n];
		}
		if (assign)
		{
			for (i = 0; i < n; i++)
			{
				for (j = 0; j < n; j++)
				{
					element[i][j] = 0.0;
				}
			}
		}
	}

	//拷贝构造函数
	Determinant(Determinant& B)
	{
		n = B.n;
		int i, j;
		element = new double*[n];
		for (i = 0; i < n; i++)
		{
			element[i] = new double[n];
		}
		for (i = 0; i < n; i++)
		{
			for (j = 0; j < n; j++)
			{
				element[i][j] = B[i][j];
			}
		}
	}

	//析构函数
	~Determinant()
	{
		int k;
		for (k = 0; k < n; k++)
		{
			delete[] element[k];
		}
		delete[] element;
	}

	//默认(c为ch1时)将A的第k行乘以c0,否则将第k列乘以c0
	void linear(int k, double c0, char c = ch1)
	{
		if (maths.range(k, 0, n - 1))
		{
			int i;
			if (c == ch1)
			{
				for (i = 0; i < n; i++)
				{
					(*this)[k][i] = c0*(*this)[k][i];
				}
				return;
			}
			for (i = 0; i < n; i++)
			{
				(*this)[i][k] = c0*(*this)[i][k];
			}
		}
		return;
	}

	//默认(c为ch1时)交换A的第x行和第y行,否则交换第x列和第y列
	void swap(int x, int y, char c = ch1)
	{
		if (maths.range(x, 0, n - 1) && maths.range(y, 0, n - 1) && x != y)
		{
			int i, j;
			if (c == ch1)
			{
				for (j = 0; j < n; j++)
				{
					maths.swap(element[x][j], element[y][j]);
				}
				return;
			}
			for (i = 0; i < n; i++)
			{
				maths.swap(element[i][x], element[i][y]);
			}
		}
		return;
	}

	//默认(c为ch1时)将A的第x行加上第y行的c0倍,否则将第x列加上第y列的c0倍
	void add(int x, int y, double c0, char c = ch1)
	{
		if (maths.range(x, 0, n - 1) && maths.range(y, 0, n - 1) && x != y)
		{
			int k;
			if (c == ch1)
			{
				for (k = 0; k < n; k++)
				{
					element[x][k] += c0*element[y][k];
				}
				return;
			}
			for (k = 0; k < n; k++)
			{
				element[k][x] += c0*element[k][y];
			}
		}
		return;
	}

	//默认(c为ch1时)判断A的第k行所有元素是否相同,否则判断第k列所有元素是否相同
	bool equal(int k, char c = ch1)
	{
		if (maths.range(k, 0, n - 1))
		{
			int i;
			if (c == ch1)
			{
				for (i = 1; i < n; i++)
				{
					if (element[k][0] != element[k][i])
					{
						return(false);
					}
				}
				return(true);
			}
			for (i = 1; i < n; i++)
			{
				if (element[0][k] != element[i][k])
				{
					return(false);
				}
			}
			return(true);
		}
		bool *o = new bool;
		return(*o);
	}

	//求A的转置行列式A'
	Determinant transpose()
	{
		int i, j;
		Determinant B(n, false);
		for (i = 0; i < n; i++)
		{
			for (j = 0; j < n; j++)
			{
				B[i][j] = element[j][i];
			}
		}
		return(B);
	}

	//判断A是否为上三角行列式(左下或右上为0)
	bool upper()
	{
		int i, j;
		for (i = 1; i < n; i++)
		{
			for (j = 0; j < i; j++)
			{
				if (element[i][j] != 0)
				{
					for (i = n - 2; i > -1; i--)
					{
						for (j = i + 1; j < n; j++)
						{
							if (element[i][j] != 0)
							{
								return(false);
							}
						}
					}
					return(true);
				}
			}
		}
		return(true);
	}

	//判断A是否为下三角行列式(左上或右下为0)
	bool lower()
	{
		int i, j, m = n - 1;
		for (i = 0; i < m; i++)
		{
			for (j = 0; j < m - i; j++)
			{
				if (element[i][j] != 0)
				{
					for (i = 1; i < n; i++)
					{
						for (j = n - i; j < n; j++)
						{
							if (element[i][j] != 0)
							{
								return(false);
							}
						}
					}
					return(true);
				}
			}
		}
		return(true);
	}

	//判断A是否为范德蒙德行列式
	bool vandermonde()
	{
		if (!element[0][0])
		{
			if (equal(0, ch1))
			{
				int i, j;
				double mid;
				for (j = 0; j < n; j++)
				{
					mid = element[1][j];
					for (i = 2; i < n; i++)
					{
						mid = mid*element[1][j];
						if (element[i][j] != mid)
						{
							return(false);
						}
					}
				}
				return(true);
			}
			if (equal(0, ch2))
			{
				int i, j;
				double mid;
				for (i = 0; i < n; i++)
				{
					mid = element[i][1];
					for (j = 2; j < n; j++)
					{
						mid = mid*element[i][1];
						if (element[i][j] != mid)
						{
							return(false);
						}
					}
				}
				return(true);
			}
		}
		return(false);
	}

	//求元素A[i0][j0]的余子式
	Determinant cofactor(int i0, int j0)
	{
		int m = n - 1;
		if (maths.range(i0, 0, m) && maths.range(j0, 0, m))
		{
			int i, j;
			Determinant B(m, false);
			for (i = 0; i < i0; i++)
			{
				for (j = 0; j < j0; j++)
				{
					B[i][j] = element[i][j];
				}
			}
			for (i = 0; i < i0; i++)
			{
				for (j = j0; j < m; j++)
				{
					B[i][j] = element[i][j + 1];
				}
			}
			for (i = i0; i < m; i++)
			{
				for (j = 0; j < j0; j++)
				{
					B[i][j] = element[i + 1][j];
				}
			}
			for (i = i0; i < m; i++)
			{
				for (j = j0; j < m; j++)
				{
					B[i][j] = element[i + 1][j + 1];
				}
			}
			return(B);
		}
		Determinant *B = new Determinant;
		return(*B);
	}

	//求元素A[i0][j0]、A[i0][j1]、A[i1][j0]、A[i1][j1]的余子式(i0<i1 & j0<j1)
	Determinant cofactor(int i0, int i1, int j0, int j1)
	{
		int i = i1 - 1, j = j1 - 1, m = n - 1;
		if (maths.range(i1, 0, m) && maths.range(i0, 0, i))
		{
			if (maths.range(j1, 0, m) && maths.range(j0, 0, j))
			{
				return(cofactor(i0, j0).cofactor(i, j));
			}
		}
		Determinant *B = new Determinant;
		return(*B);
	}

	//当n=1或2时,可直接求|A|
	double compute()
	{
		if (n == 2)
		{
			return(element[0][0] * element[1][1] - element[0][1] * element[1][0]);
		}
		if (n == 1)
		{
			return(element[0][0]);
		}
		double *detA = new double;
		return(*detA);
	}

	//利用拉普拉斯定理展开第i0(默认i0=0)行以求|A|
	double laplace1(int i0 = 0)
	{
		if (n > 2)
		{
			if (maths.range(i0, 0, n - 1))
			{
				int j0;
				double detA = 0.0;
				for (j0 = 0; j0 < n; j0++)
				{
					detA += maths.power(-1, i0 + j0)*element[i0][j0] * cofactor(i0, j0).laplace1();
				}
				return(detA);
			}
			return(transform());
		}
		return(compute());
	}

	//利用拉普拉斯定理展开第i0、i1(默认i0=0,i1=1 & i0<i1)行以求|A|
	double laplace2(int i0 = 0, int i1 = 1)
	{
		if (n > 2)
		{
			if (maths.range(i1, 0, n - 1) && maths.range(i0, 0, i1 - 1))
			{
				int i = i0 + i1, j0, j1;
				double c0, detA = 0.0;
				for (j0 = 0; j0 < n; j0++)
				{
					for (j1 = j0 + 1; j1 < n; j1++)
					{
						c0 = element[i0][j0] * element[i1][j1] - element[i0][j1] * element[i1][j0];
						detA += maths.power(-1, i + j0 + j1)*c0*cofactor(i0, i1, j0, j1).laplace2();
					}
				}
				return(detA);
			}
			return(transform());
		}
		return(compute());
	}

	//利用行列式变换(性质)求|A|
	double transform()
	{
		if (n > 2)
		{
			bool Swap;
			int i, j, r = 0;
			double c0;
			Determinant A(*this);
			for (i = 0; i < n - 1; i++)
			{
				if (A[i][i] == 0)
				{
					Swap = false;
					for (j = i + 1; j < n; j++)
					{
						if (A[j][i] != 0)
						{
							A.swap(i, j, ch1);
							Swap = true;
							r++;
							break;
						}
					}
					if (!Swap)
					{
						return(0.0);
					}
				}
				for (j = i + 1; j < n; j++)
				{
					if (A[j][i] != 0)
					{
						c0 = -A[j][i] / A[i][i];
						A.add(j, i, c0, ch1);
					}
				}
			}
			double detA = A[0][0];
			for (i = 1; i < n; i++)
			{
				detA *= A[i][i];
			}
			return(maths.power(-1, r)*detA);
		}
		return(compute());
	}

	//重载[],使A[k]即为A.element[k]
	double* &operator[](int k)
	{
		if (maths.range(k, 0, n - 1))
		{
			return(element[k]);
		}
		return(element[0]);
	}

	//A=B
	Determinant operator=(Determinant B)
	{
		n = B.n;
		int i, j;
		element = new double*[n];
		for (i = 0; i < n; i++)
		{
			element[i] = new double[n];
		}
		for (i = 0; i < n; i++)
		{
			for (j = 0; j < n; j++)
			{
				element[i][j] = B[i][j];
			}
		}
	}

	//判断A==B
	bool operator==(Determinant B)
	{
		if (n == B.n)
		{
			int i, j;
			for (i = 0; i < n; i++)
			{
				for (j = 0; j < n; j++)
				{
					if (element[i][j] != B[i][j])
					{
						return(false);
					}
				}
			}
			return(true);
		}
		return(false);
	}

	//判断A!=B
	bool operator!=(Determinant B)
	{
		if (n == B.n)
		{
			int i, j;
			for (i = 0; i < n; i++)
			{
				for (j = 0; j < n; j++)
				{
					if (element[i][j] != B[i][j])
					{
						return(true);
					}
				}
			}
			return(false);
		}
		return(true);
	}

	//cin>>A,A.n为0时先输入阶数,再依次输入各个元素
	friend istream& operator>>(istream& in, Determinant& A)
	{
		if (A.n == 0)
		{
			in >> A.n;
			A.element = new double*[A.n];
		}
		int i, j;
		for (i = 0; i < A.n; i++)
		{
			for (j = 0; j < A.n; j++)
			{
				in >> A[i][j];
			}
		}
		return(in);
	}

	//cout<<A,格式为第1行,换行...第n行,换行
	friend ostream& operator<<(ostream& out, Determinant& A)
	{
		int i, j;
		for (i = 0; i < A.n; i++)
		{
			out << A[i][0];
			for (j = 1; j < A.n; j++)
			{
				out << " " << A[i][j];
			}
			out << endl;
		}
		return(out);
	}
};

#endif // DETERMINANT_H